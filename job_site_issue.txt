# NEZPROサイトのジョブページ統合における問題点と解決策

## 現在の問題点

### 1. Gatsbyのパスプレフィックス問題
Gatsbyは、ビルド時に全ての静的アセット（CSS、JavaScript、画像など）のパスを決定します。
この際、以下のような処理が行われます：

- デフォルトでは、サイトがドメインのルート（/）に配置されることを前提としてビルドされる
- 静的アセットへのパスは、例えば：
  - `/static/styles.css`
  - `/page-data/index/page-data.json`
  - `/_gatsby/static/images/example.jpg`
- これらのパスは、JavaScriptコード内でもハードコードされている
- 圧縮・最適化されたコード内にもパス参照が埋め込まれている

現在のビルドファイルを `/job/` に配置すると：
- ブラウザは `/job/static/styles.css` を探しに行くべきところを
- `/static/styles.css` を探しにいってしまう（404エラー）
- これは、ビルド時に `pathPrefix` が設定されていないため

### 2. 既存の制約
- ビルド済みファイルしか存在しない
- 元のGatsbyプロジェクトのソースコードがない
- そのため、ビルド設定を変更して再ビルドができない

## 解決策

### 1. サブドメイン化（推奨）
- `jobs.notequalzero.com` として配置
- メリット：
  - パスの問題が完全に解決
  - 既存のビルドファイルがそのまま使える
  - 将来的な拡張性が高い
  - メンテナンスが容易
- 実装手順：
  1. DNSにサブドメインのレコードを追加
  2. Firebaseのホスティング設定でカスタムドメインを追加
  3. メインサイトのリンクをサブドメインに更新

### 2. 別プロジェクト化
- ジョブサイト用に新しいFirebaseプロジェクトを作成
- メリット：
  - パスの問題が解決
  - 既存のビルドファイルが使える
  - プロジェクトの分離による管理のしやすさ
- デメリット：
  - 複数プロジェクトの管理が必要

### 3. Gatsbyプロジェクトの再構築（工数大）
- 新規にGatsbyプロジェクトを作成し直す
- メリット：
  - 正しいパス設定でビルドできる
  - 将来的な修正も容易
- デメリット：
  - 既存のデザインやコンテンツを再実装する必要がある
  - 大きな工数が必要
- 実装手順：
  1. 新規Gatsbyプロジェクト作成
  2. gatsby-config.jsに`pathPrefix: '/job'`を設定
  3. コンテンツの再実装
  4. `gatsby build --prefix-paths`でビルド

## 結論
- 現在のプロジェクト構成のままでの完全な解決は困難
- サブドメイン化が最も現実的で推奨される解決策
- 長期的な運用とメンテナンス性を考慮すると、一時的な工数がかかっても抜本的な解決を図ることを推奨
